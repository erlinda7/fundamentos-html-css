/* 
Regla CSS consta de 2 partes
  1) el selector
  2) Bloque de declaraciones: {
    atributo: valor;
    atributo-de-mas-dos-palabras: otro-valor;
  } 
*/
/*
es una mala practica usar @import, hasta que no obtiene todo el contenido de la hoja de estilo sigue leyendo el codigo html,
porque son bloqueantes a la hora de que el navegador lee esta instruccion
*/
@import url("otro-hoja.css");

h1 {
  color: orangered;
  background-color: black;
}

/*
Links de referencia y documentacion 
  https://es.wikipedia.org/wiki/Hoja_de_estilos_en_cascada
  https://www.w3.org/html/logo/
  https://www.w3.org/standards/webdesign/htmlcss.html
  https://www.w3.org/TR/css-2020/
  https://developer.mozilla.org/es/docs/Web/CSS
  https://cssreference.io/
  https://caniuse.com/
  https://codeguide.co/
*/

/*
Selectores Basicos
  1) Etiquetas - son elementos html
  2) Identificadores - atributo id - #
  3) Clases - atributo class - .
*/

p {
  color: midnightblue;
}

/*Dar estilos con Id se considera un AntiPatron, que no es correcto, evitar lo mas que se pueda*/
#parrafo-dos {
  background-color: skyblue;
}

/*Dar estilos con clases nos permite reutilizar nuestro codigo css*/
.text-20 {
  font-size: 20px;
}
.text-32 {
  font-size: 32px;
}
.bg-skyblue {
  background-color: skyblue;
}
.bg-steelblue {
  background-color: steelblue;
}
.text-white {
  color: white;
}

.hijos-directos > li {
  background-color: thistle;
}
.hijos-descendientes b {
  background-color: thistle;
}

/*Los selectores de hermanos van a aplicara a todos los elementos que son hermanos(en el mismo nivel) y que esten  por debajo del elemento de referencia*/
.hermanos-general ~ li {
  background-color: thistle;
}

/*el que inmediatamente  despues en el mismo nivel del que tiene la clase*/
.hermano-adyacentes + li {
  background-color: thistle;
}

/*Selectores atributos*/
/*entre corchetes se pone el atributo al que queremos dar estilo*/
.selectores-atributos a[href] {
  color: orangered;
}
.selectores-atributos a[target="_blank"] {
  font-weight: bold;
}
/*El comodin del * aplica el estilo si contiene el texto en cuestion en cualquier parte*/
.selectores-atributos a[href*="jonmircha"] {
  font-size: 24px;
}
/*El comodin del ^ aplica el estilo si contiene el texto en cuestion al inicio*/
.selectores-atributos a[href^="http://"]
{
  text-decoration: none;
}
/*El comodin del $ aplica el estilo si contiene el texto en cuestion al final*/
.selectores-atributos a[href$=".com"] {
  background-color: black;
}
/*El comodin del ~ aplica el estilo si contiene el texto en cuestion en una lista separada por espacios*/
.selectores-atributos a[class~="cursos"] {
  background-color: midnightblue;
}
/*El comodin del | aplica el estilo si contiene el texto en cuestion en una lista separada por espacios y que despues del texto en cuestion pueda venir un guion medio*/
.selectores-atributos a[class|="menu"] {
  font-style: italic;
}

/*Selector universal*/
* {
  font-family: sans-serif;
}
.selector-universal * {
  font-size: 24px;
}

/*Pseudoclases - Dan estilos dependiendo del contexto, posicion o estado del elemento
https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes
*/
.form-pseudoclases *:required {
  border-color: yellow;
}
.form-pseudoclases *:valid {
  border-color: green;
}
.form-pseudoclases *:invalid {
  border-color: red;
}
.form-pseudoclases *:focus {
  background-color: skyblue;
}
.form-pseudoclases *:disabled {
  background-color: pink;
}
/*El :visited debe estar antes de :hover, caso contrario lo deshabilita, tener cuidado con los link*/
.menu-pseudoclases a:visited {
  color: olive;
}
.menu-pseudoclases a:hover {
  color: orange;
}
.p-pseudoclases:hover {
  font-size: 24px;
}
/*cuando es id y tenga el id activo en la url http://127.0.0.1:5500/02-cursoCSS/index.html#temario-css*/
#temario-css:target {
  background-color: lightgreen;
}

.lista-pseudoclases li:first-child {
  color: green;
}
.lista-pseudoclases li:last-child {
  color: violet;
}
.lista-pseudoclases li:nth-child(3) {
  color: navy;
}
.lista-pseudoclases li:nth-child(4n) {
  font-size: 20px;
}
/*de 3 en 3 mas 1, ejm: 3+1=4, 6+1=7, 9+1=10, 12+1=13 como ya no hay 13 aplica al primero de la lista*/
.lista-pseudoclases li:nth-child(3n + 1) {
  font-weight: bold;
}
/*para aplicar a los elementos pares*/
.lista-pseudoclases li:nth-child(even) {
  background-color: yellow;
}
/*impares*/
.lista-pseudoclases li:nth-child(odd) {
  background-color: orange;
}
/*al primer elemento parrafo <p>, no el primer hijo*/
.articulo-pseudoclases p:first-of-type {
  background-color: pink;
}
.articulo-pseudoclases p:last-of-type {
  background-color: violet;
}
.articulo-pseudoclases p:nth-of-type(3) {
  background-color: fuchsia;
}
/*cuando quieres aplicar a todos los elementos excepto al que defines, si quieres a otros elementos mas se separa con comas dentro el aprentesis (p, footer, etc)*/
.articulo-pseudoclases *:not(p) {
  background-color: beige;
}

/*
Pseudoelementos - Dan estilos especificas de un elemnto, se usa el :: para deiferenciarlos de las pseudoclases
https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-elements
*/
.saga-geminis::before {
  content: ðŸŽŽ;
}
.saga-geminis::after {
  content: â™Š;
}
.saga-precio::before {
  content: "$";
  font-weight: bold;
}
.saga-precio::after {
  content: "USD";
  font-weight: bold;
}
.p-pseudoelementos::first-letter {
  font-weight: bold;
  font-size: 32px;
}
.p-pseudoelementos::first-line {
  color: coral;
}
.p-pseudoelementos::selection {
  color: greenyellow;
  background-color: black;
}
.input-pseudoelementos::placeholder {
  color: green;
}

/*agrupar selectores*/
.form-agrupar-selectores input[type="text"],
.form-agrupar-selectores input[type="email"],
.form-agrupar-selectores textarea {
  border-color: yellow;
  border-width: 2px;
  border-style: dashed;
  background-color: black;
  font-size: 20px;
  display: block;
  width: 300px;
}

/*
El algoritmo de Css: Es la forma en que el navegador aplica los estilos al documento HTML. Es vital entender este concepto para que entiendas como se aplican y en algunas ocasiones se sobreescriben las reglas CSS.
  1) La cascada
  2) La especificidad
  3) La herencia

La cascada es el mecanismo en que el navegador aplica los estilos, Y toma en cuenta los siguiente en este orden:
  1) El origen del codigo: 
    - El User Agent (los estilos por defecto del navegador)
    - Personalizaciones del usuario
    - Los estilos del autor
  2) La especificidad del selector
  3) Orden de aparicion

La especificidad es el peso que tiene un selector cuando hay conflicto de estilos. Se calcul de la sguiente forma: 
  Etiquetas y pseudoelementos-------------------------- 0,0,0,1
  Clases, atributos y pseudoclases--------------------- 0,0,1,0
  Indentificadores------------------------------------- 0,1,0,0
  Estilos en linea------------------------------------- 1,0,0,0
  !important-----------------------------Rompe la especificidad

La Herencia, es la capacidad de un selector de obtener (heredar) los valores de sus ancestros mas cercanos, para aplicarla se usa el valor inherit, si queremos evitarla podemos aignar otro valor o inicializar la propiedad en cuestion con el valor initial

https://web.dev/learn/css/inheritance/#which-properties-are-inheritable
*/

blockquote#cita-marco.cita-marco {
  background-color: lightsteelblue;
}
/*cuando aplicas a la etiqueta a todos los blouckquote que hay en el documento*/
blockquote {
  background-color: burlywood;
}
#cita-marco {
  background-color: lightgreen;
}
/*ser tan especifico en un selector tambien es mala practica, va pegado con ., este blouckquete aparte debe tener la clase cita-marco*/
blockquote.cita-marco {
  background-color: tomato;
}
.cita-marco {
  background-color: cornflowerblue;
}
.cita-marco {
  background-color: mediumaquamarine !important;
}
blockquote#cita-marco {
  background-color: lightsalmon;
}
/*usar important es mala practica*/
.cita-marco {
  background-color: darkorange !important;
  /*su hijo hereda automatico la tipografia*/
  font-size: 36px;
  /*algunos valores no se heredan automaticamente @*/
  border-style: dotted;
  border-color: red;
}
.cita-marco cite {
  background-color: pink;
  background-color: inherit;
  /*Cancelar la herencia poner otro valor*/
  font-size: 24px;
  /*Cancelar la herencia poner initial tamaÃ±o por defecto*/
  font-size: initial;
  /*los que no se heredan automatico se hereda manual si queremos*/
  border-style: inherit;
  border-color: inherit;
}

/*
los prefijos de los navegadores
   -webkit-user-select: none;
   -moz-user-select: none;
   -ms-user-select: none;
    user-select: none;

https://autoprefixer.github.io/
https://caniuse.com/
*/
